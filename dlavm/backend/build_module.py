from time import strftime, localtime
from .plan_memory import Storage
from ..driver import ir, transform
from ..target import CodeGenEngine
from dlavm import adr
from dlavm import ne


class BuildModule:

    def __init__(self, lib, graph, storage, params, insts=None, target="h"):
        self.lib = lib
        self.graph = graph
        self.storage = storage
        self.params = params
        self.insts = insts
        self.target = target

    def get_source(self):
        gen = CodeGenEngine.Get(self.target)()
        local_time = strftime('%Y-%m-%d %H:%M:%S', localtime())
        source = [gen.BriefAnnotation(f"generated by dlavm.backend in {local_time}")]
        source += [gen.main(self.lib)]
        return "\n\n".join(source)

    def get_insts_bin(self):
        if self.insts is None:
            print("*Warning* : no found insts in this module")
            return b""
        else:
            def _wrap(data):
                if isinstance(data, list):
                    return b"".join([_wrap(d) for d in data])
                else:
                    return data.tobytes()
            return _wrap(self.insts)